from solution_sebastian import Solution as sebastian_solution
import pytest


@pytest.mark.parametrize("solution_class", [sebastian_solution])
def test_many(solution_class):
    grid = [["1", "0", "1", "1", "0", "0", "1", "0", "1", "1", "1", "1", "0", "1", "0", "1", "1", "1", "1", "0"], ["0", "1", "0", "0", "1", "0", "1", "0", "1", "1", "1", "1", "1", "1", "0", "1", "1", "0", "1", "1"], ["1", "0", "0", "1", "0", "1", "0", "1", "0", "1", "1", "0", "1", "1", "1", "0", "0", "1", "1", "0"], ["0", "1", "1", "0", "0", "1", "1", "0", "1", "1", "1", "1", "0", "0", "1", "0", "0", "0", "1", "1"], ["1", "1", "0", "1", "0", "0", "1", "0", "0", "0", "1", "0", "1", "0", "1", "1", "1", "0", "1", "1"], ["0", "0", "0", "0", "1", "0", "1", "1", "0", "0", "1", "0", "0", "1", "0", "1", "1", "1", "1", "0"], ["1", "0", "1", "1", "1", "1", "0", "1", "1", "0", "1", "1", "0", "1", "1", "1", "0", "0", "1", "0"], ["0", "1", "1", "0", "0", "0", "1", "0", "0", "1", "0", "1", "1", "1", "0", "0", "1", "1", "0", "1"], ["0", "0", "0", "0", "1", "1", "0", "1", "0", "0", "1", "1", "0", "1", "0", "0", "1", "0", "1", "0"], ["0", "0", "1", "1", "1", "0", "1", "0", "1", "0", "1", "1", "1", "0", "1", "1", "1", "1", "1", "0"], [
        "1", "0", "1", "0", "1", "1", "1", "0", "1", "1", "1", "0", "1", "0", "1", "0", "1", "0", "1", "1"], ["0", "0", "1", "1", "1", "1", "0", "1", "1", "1", "0", "1", "0", "0", "0", "1", "1", "1", "0", "1"], ["1", "1", "1", "0", "0", "0", "0", "0", "1", "1", "0", "1", "1", "1", "0", "1", "1", "1", "1", "0"], ["0", "0", "1", "1", "1", "0", "0", "1", "0", "0", "1", "1", "1", "1", "1", "1", "0", "1", "1", "0"], ["0", "0", "0", "1", "1", "0", "0", "0", "0", "1", "1", "0", "1", "0", "0", "1", "1", "1", "1", "1"], ["0", "1", "1", "1", "0", "1", "0", "0", "1", "1", "1", "1", "1", "0", "1", "1", "1", "0", "0", "1"], ["0", "0", "0", "0", "1", "1", "1", "1", "0", "0", "0", "0", "1", "0", "0", "0", "0", "1", "1", "0"], ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "0", "1", "1", "1", "1", "1", "1"], ["0", "1", "0", "0", "1", "0", "0", "1", "1", "1", "1", "1", "1", "0", "1", "0", "1", "1", "1", "1"], ["0", "0", "1", "1", "1", "1", "1", "0", "0", "0", "1", "1", "1", "1", "1", "1", "0", "1", "1", "0"]]
    sol = solution_class()
    assert sol.numIslands(grid) == 23


@pytest.mark.parametrize("solution_class", [sebastian_solution])
def test_four(solution_class):
    grid = [["1", "1", "1", "1", "1", "0", "1", "1", "1", "1"],
            ["1", "0", "1", "0", "1", "1", "1", "1", "1", "1"],
            ["0", "1", "1", "1", "0", "1", "1", "1", "1", "1"],
            ["1", "1", "0", "1", "1", "0", "0", "0", "0", "1"],
            ["1", "0", "1", "0", "1", "0", "0", "1", "0", "1"],
            ["1", "0", "0", "1", "1", "1", "0", "1", "0", "0"],
            ["0", "0", "1", "0", "0", "1", "1", "1", "1", "0"],
            ["1", "0", "1", "1", "1", "0", "0", "1", "1", "1"],
            ["1", "1", "1", "1", "1", "1", "1", "1", "0", "1"],
            ["1", "0", "1", "1", "1", "1", "1", "1", "1", "0"]]
    sol = solution_class()
    assert sol.numIslands(grid) == 2


@pytest.mark.parametrize("solution_class", [sebastian_solution])
def test_simple(solution_class):
    grid = [
        ["1", "1", "1", "1", "0"],
        ["1", "1", "0", "1", "0"],
        ["1", "1", "0", "0", "0"],
        ["0", "0", "0", "0", "0"]
    ]
    sol = solution_class()
    assert sol.numIslands(grid) == 1


@pytest.mark.parametrize("solution_class", [sebastian_solution])
def test_two(solution_class):
    grid = [
        ["1", "1", "0", "1", "0"],
        ["1", "1", "0", "1", "0"],
        ["1", "1", "0", "0", "0"],
        ["0", "0", "0", "0", "0"]
    ]
    sol = solution_class()
    assert sol.numIslands(grid) == 2


@pytest.mark.parametrize("solution_class", [sebastian_solution])
def test_five(solution_class):
    grid = [
        ["1", "1", "0", "1", "0"],
        ["0", "0", "0", "1", "0"],
        ["1", "1", "0", "0", "1"],
        ["0", "0", "1", "1", "0"]
    ]
    sol = solution_class()
    assert sol.numIslands(grid) == 5


@pytest.mark.parametrize("solution_class", [sebastian_solution])
def test_three(solution_class):
    grid = [["1", "1", "1"], ["0", "1", "0"], ["1", "1", "1"]]
    sol = solution_class()
    assert sol.numIslands(grid) == 1


# look at left and top if one of them is 1 then current belongs to same island
# if both are 0 then create a new island
# if both are 1:
#    if they are on the same island:
#        current belongs to the island
#    else:
#        unify the islands (in islands array point larger to smaller)
